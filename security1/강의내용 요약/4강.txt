4강.
인가 없이 인증만 있으면 되는 로그인 구현(일반 사용자)



1.
config 패키지 하위에 auth패키지를 생성.
안에 PrincipalDetails를 생성

내용은 코드 참조.

//시큐리티가 /login주소 요청을 낚아채서 로그인을 진행시킨다
//로그인 진행이 완료되면 시큐리티가 가지고 있는 session을 만들어준다.(Security ContextHolder)
//Security ContextHolder 안의 오브젝트 -> Authentication 타입 객체
//Authentication 안에 User 정보가 있어야 댐.
//User오브젝트 타입 -> UserDetails타입 객체여야 함.

//Security Session -> Authentication -> UserDetails

즉, PrincipalDetails 는 로그인할때 유저 정보를 다루기 위한 객체를 만들기 위한것인데(?)
그 객체는 Security Session 안에 Authentication 안에 UserDetails를 사용해야 함.
때문에 코드에서 UserDetails를 implements하여 PrincipalDetails을 오버라이딩해서 사용하는 것.

getAuthorities()메서드 유저의 권한을 Collection<? extends GrantedAuthority>타입으로,,,(이게뭐람) 리턴받는 메서드이다.
user.getRoll은 String타입을 반환하기 때문에 코드와 같이 작성해서 얻어내야 한다.



2.
Security Session -> Authentication -> UserDetails 요기서 UserDetails는 PrincipalDeetails로 구현했기 때문에
이제 이것을 Authentication에 넣어주는(리턴해주는) 작업을 한다.

같은 auth패키지에 PrincipalDetailsService를 생성하고 UserDetailsService를 implement.
이후 오버라이딩 할것.

/login요청이 오면 자동으로 UserDetailsService 타입으로 IoC되어있는 loadUserByUsername 함수가 실행됨.
때문에 UserDetailsService 타입으로 만들기 위해 implements한것. 이 타입이 아니면 안됨. 이것은 공식.

loadUserByUsername의 매개변수명은 프론트에서 보낼때 파라미터이름과 같아야 함.
findByUsername()은 UserRepository에서 정의해줘야 사용할 수 있으며 이것은 Jpa Query methods이다.

